<?xml version="1.0"?>
<doc>
    <assembly>
        <name>YLib</name>
    </assembly>
    <members>
        <member name="M:YLib.ActiveComponents.ConfirmPanel.DefineHeight">
            <summary>
            Reset height by defineHeight of Buttons
            </summary>
        </member>
        <member name="M:YLib.NewControls.LabelBase.Draw_Text(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Отрисовка текста
            </summary>
        </member>
        <member name="M:YLib.NewControls.LabelBase.UserSizeChanged">
            <summary>
            This worked only in design time
            </summary>
        </member>
        <member name="M:YLib.NewControls.LabelBase.InvalidateTextAndSize">
            <summary>
            Set changed text with recalc size by text
            </summary>
        </member>
        <member name="M:YLib.NewControls.LabelBase.DefineSize(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Define Size (if used default font then method set only after added on Parent)
            </summary>
        </member>
        <member name="M:YLib.NewControls.LabelBase.DefineHeight(System.Int32,System.Int32)">
            <summary>
            Define Height (if used default font then method set only after added on Parent)
            </summary>
        </member>
        <member name="M:YLib.NewControls.LabelBase.DefineWidth(System.Int32,System.Int32)">
            <summary>
            Define Width (if used default font then method set only after added on Parent)
            </summary>
        </member>
        <member name="M:YLib.NewControls.LabelBase.UpdateText">
            <summary>
            Manual update text by separator
            </summary>
        </member>
        <member name="M:YLib.NewControls.ControlNewBase.OnLoad">
            <summary>
            This method call when control first add on Parent
            </summary>
        </member>
        <member name="M:YLib.NewControls.ControlNewBase.Blink_Start">
            <summary>
            Start blink
            </summary>
        </member>
        <member name="M:YLib.NewControls.ControlNewBase.Blink_Start(System.Int32,System.Int32)">
            <summary>
            Start blink
            </summary>
            <param name="blinkTimeOff">Time invisible (ms)</param>
            <param name="blinkTimeOn">Time visible (ms)</param>
        </member>
        <member name="M:YLib.NewControls.ControlNewBase.Blink_Stop">
            <summary>
            Stop blink
            </summary>
        </member>
        <member name="M:YLib.NewControls.ControlNewBase.VisibleAlternate">
            <summary>
            Change Visible
            </summary>
        </member>
        <member name="M:YLib.NewControls.ControlNewBase.EnableAlternate">
            <summary>
            Change Enabled
            </summary>
        </member>
        <member name="F:YLib.NewControls.RectanlgeBase.Drag">
            <summary>
            this is property for designMode
            </summary>
        </member>
        <member name="M:YLib.NewControls.RectanlgeBase.Update_BackColor">
            <summary>
            Update BackGround if BackColor style changed
            </summary>
        </member>
        <member name="M:YLib.NewControls.RectanlgeBase.Draw_BackGround(System.Drawing.Graphics)">
            <summary>
            Redraw all fields without border
            </summary>
        </member>
        <member name="M:YLib.NewControls.RectanlgeBase.Draw_BackColor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draw_BackColor with BackColor in preset rectangle
            </summary>
            <param name="graphics">Graphics associated with painting</param>
            <param name="rectangle">Preset rectangle</param>
            <param name="color">Color for backColor</param>
            <param name="color2">Color for backColor(for gradient)</param>
        </member>
        <member name="M:YLib.NewControls.RectanlgeBase.Draw_Color(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Fill rectangle with preset color in preset rectangle
            </summary>
            <param name="graphics">Graphics associated with painting</param>
            <param name="color">Preset color</param>
            <param name="color2">Preset color 2 for gradient</param>
            <param name="rectangle">Preset rectangle</param>
        </member>
        <member name="M:YLib.NewControls.RectanlgeBase.Draw_Border(System.Drawing.Graphics)">
            <summary>
            Отрисовка рамки
            </summary>
        </member>
        <member name="M:YLib.NewControls.RectanlgeBase.Calc_RectBackground">
            <summary>
            Calculate rectangle for draw BackColor
            </summary>
        </member>
        <member name="M:YLib.NewControls.RectanlgeBase.OnRectangleBackChanged(System.EventArgs)">
            <summary>
            Event call when Resize RectangleBackground
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:YLib.NewControls.RectanlgeBase.ValidIndex(System.Collections.IList,System.Int32)">
            <summary>
            Return true if index is valid
            </summary>
            <param name="array">Array of any type class</param>
            <param name="index">Current index of array</param>
            <returns></returns>
        </member>
        <member name="M:YLib.NewControls.RectanlgeBase.ValidIndex``1(``0[],System.Int32)">
            <summary>
            Return true if index is valid
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">Array of any type class</param>
            <param name="index">Current index of array</param>
            <returns></returns>
        </member>
        <member name="M:YLib.NewControls.RectanlgeBase.IndexByListChanged(System.Collections.IList,System.Int32)">
            <summary>
            Update index or value if list changed
            </summary>
            <param name="array">Array of any type class</param>
            <param name="index">Current index</param>
        </member>
        <member name="M:YLib.NewControls.RectanlgeBase.IndexByListChanged``1(``0[],System.Int32)">
            <summary>
            Update index or value if list changed
            </summary>
            <param name="array">Array of any type class</param>
            <param name="index">Current index</param>
        </member>
        <member name="M:YLib.NewControls.RectanlgeBase.Draw_DebugText(System.Object,System.Drawing.Graphics,System.String,System.Windows.Forms.TextFormatFlags)">
            <summary>
            Show nonexistent index or other error info
            </summary>
            <param name="_Objtext">object with text</param>
            <param name="graphics">graphics current control</param>
            <param name="symbDebug">symbol added with debug text</param>
            <param name="txtFormat">location input debug text</param>
        </member>
        <member name="M:YLib.NewControls.ButtonNew.Draw_Border(System.Drawing.Graphics)">
            <summary>
            Отрисовка рамки
            </summary>
        </member>
        <member name="M:YLib.NewControls.ButtonNew.SetIndexByValue">
            <summary>
            Обновление индекса по сравнению Value и ValueSet. Если равны, то индекс = 1, иначе = 0
            </summary>
        </member>
        <member name="M:YLib.NewControls.CheckBoxNew.Draw_Border(System.Drawing.Graphics)">
            <summary>
            Отрисовка рамки
            </summary>
        </member>
        <member name="M:YLib.NewControls.CheckBoxNew.Draw_Color(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Перерисовка всей области
            </summary>
        </member>
        <member name="M:YLib.NewControls.CheckBoxNew.Update_BackColor">
            <summary>
            Перерисовка в случае обновления BackColor Style
            </summary>
        </member>
        <member name="M:YLib.NewControls.CheckBoxNew.InvalidateCheckBox">
            <summary>
            Перерисовка CheckBox
            </summary>
        </member>
        <member name="M:YLib.NewControls.CheckBoxNew.ChangeSizeByCheckBox">
            <summary>
            Определение размера control'a под размер checkBox
            </summary>
            <returns></returns>
        </member>
        <member name="M:YLib.NewControls.CheckBoxNew.InvalidateSizeCheckBox">
            <summary>
            Изменение размеров checkBox'a под размер control'a
            </summary>
            <returns></returns>
        </member>
        <member name="M:YLib.NewControls.LabelNumeric.GetDrawForeColor">
            <summary>
            Define text draw color
            </summary>
            <returns></returns>
        </member>
        <member name="M:YLib.NewControls.LabelNumeric.GetValue(System.Object,System.Object)">
            <summary>
            Return value with according to ValueType
            </summary>
            <param name="value">Value for convert</param>
            <param name="valueError">Returned value if error convert</param>
            <returns></returns>
        </member>
        <member name="M:YLib.NewControls.LabelNumeric.ChangeValueAlm">
            <summary>
            Define alarm by current value
            </summary>
            <returns>return true, if alarm changing</returns>
        </member>
        <member name="M:YLib.NewControls.Level.GetValue(System.Object,System.Object)">
            <summary>
            Return value with according to ValueType
            </summary>
            <param name="value">Value for convert</param>
            <param name="valueError">Returned value if error convert</param>
            <returns></returns>
        </member>
        <member name="M:YLib.NewControls.Level.Update_FillAlm">
            <summary>
            Define alarm by current value
            </summary>
            <returns>return true, if alarm changing</returns>
        </member>
        <member name="M:YLib.NewControls.Level.Update_Fill(System.Single)">
            <summary>
            Дорисовка уровня
            </summary>
        </member>
        <member name="M:YLib.NewControls.Level.Calc_rect_Levels">
            <summary>
            Calculate Rectangle for Level and UnLevel
            </summary>
        </member>
        <member name="M:YLib.NewControls.TabControlNew.SetPropBtnGeneral(System.Int32)">
            <summary>
            Set property with define WidthButtons
            </summary>
        </member>
        <member name="M:YLib.NewControls.TabPageNew.PropertiesCopyTo(YLib.NewControls.TabPageNew)">
            <summary>
            Copy of some properties between two TagPages
            </summary>
            <param name="tabPageNew">TabPage in which need to set property</param>
        </member>
        <member name="M:YLib.NewControls.TabPageNew.ControlCollection.#ctor(System.Windows.Forms.Control)">
            <summary>
            </summary>
        </member>
        <member name="M:YLib.NewControls.VectorElement.Calc_RectBackground">
            <summary>
            Calculate rectangle for draw BackColor
            </summary>
        </member>
        <member name="M:YLib.NewControls.TextBoxExt.DefineWidth(System.Int32,System.Int32)">
            <summary>
            Define width by width labelinfo (if is exist) or by MaxLength (for only single line) 
            </summary>
        </member>
        <member name="M:YLib.NewControls.TextBoxExt.DefineWidth(System.String,System.Int32,System.Int32)">
            <summary>
            Define width by string from object
            </summary>
        </member>
        <member name="M:YLib.NewControls.TextBoxExt.CancelEdit(System.Char)">
            <summary>
            Действия по окончанию ввода
            </summary>
        </member>
        <member name="M:YLib.NewControls.TextBoxExt.isGoodText">
            <summary>
            Обновление текста в соответствии с проверкой
            </summary>
            <returns>return true, if text is valid</returns>
        </member>
        <member name="M:YLib.NewControls.TextBoxExt.CheckValue">
            <summary>
            Check value with input labelInfo
            </summary>
        </member>
        <member name="M:YLib.NewControls.TextBoxExt.SetTrueMinus">
            <summary>
            Проверка на возможность знака минуса
            </summary>
        </member>
        <member name="M:YLib.NewControls.TextBoxExt.GetValue(System.Object,System.Object)">
            <summary>
            Return value with according to ValueType
            </summary>
            <param name="value">Value for convert</param>
            <param name="valueError">Returned value if error convert</param>
            <returns></returns>
        </member>
        <member name="M:YLib.NewControls.TextBoxExt.DefineValueType(System.Object)">
            <summary>
            Define ValueType by type of value
            </summary>
            <param name="value">Value by which define type</param>
        </member>
        <member name="M:YLib.NewControls.MultiPicture.DrawImage(System.Drawing.Graphics)">
            <summary>
            Paint Image
            </summary>
        </member>
        <member name="M:YLib.NewControls.MultiPicture.InvalidateAndSize(System.Boolean)">
            <summary>
            Size change on ImageSizeMode or Invalidate if need
            </summary>
            <returns>Return true, if size rechanged</returns>
        </member>
        <member name="T:YLib.Expansion.EventArgsExt">
            <summary>
            Custom EventArgs with added property
            </summary>
        </member>
        <member name="P:YLib.Expansion.Interaction.DecimalSeparator">
            <summary>
            Get system number decimal separator
            </summary>
            <returns>return char</returns>
        </member>
        <member name="P:YLib.Expansion.Interaction.DecimalSeparatorStruct">
            <summary>
            Get system number decimal separator
            </summary>
            <returns>return char</returns>
        </member>
        <member name="M:YLib.Expansion.Interaction.CloseProccess(System.String,System.String,System.Int32)">
            <summary>
            Корректное завершение любого приложения
            </summary>
            <param name="_NameProccess">Имя процесса</param>
            <param name="_NameEnd_MsgBox">Титульное название MessageBox'a с подтверждением завершения</param>
        </member>
        <member name="P:YLib.Expansion.Interaction.CurrentFilePath">
            <summary>
            Return current file path for this application
            </summary>
        </member>
        <member name="P:YLib.Expansion.Interaction.CurrentPath">
            <summary>
            Return current full path for this application
            </summary>
        </member>
        <member name="P:YLib.Expansion.Interaction.CurrentUserName">
            <summary>
            Return Current user name in system
            </summary>
        </member>
        <member name="M:YLib.Expansion.FGraph.ColorFromRGB(System.String)">
            <summary>
            Get Color from RGB in string patern like as [255*255*255] where * is ',' or '.' or ';' or '/'
            </summary>
        </member>
        <member name="M:YLib.Expansion.FGraph.DrawBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Int32,System.Windows.Forms.ButtonBorderStyle)">
            <summary>
            Draw Border around rectangle
            </summary>
            <param name="graphics">Using graphics</param>
            <param name="rectangle">Recatangle in which draw border</param>
            <param name="borderColor">Color of border</param>
            <param name="borderSize">Size of border</param>
            <param name="borderStyle">Style line of border</param>
        </member>
        <member name="M:YLib.Expansion.FGraph.GetColorByDifference(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Get color by difference two colors
            </summary>
            <param name="color1">Color 1</param>
            <param name="color2">Color 2</param>
            <param name="diffColor1">Difference color 1 for getter color 2</param>
            <returns>Return difference color 2</returns>
        </member>
        <member name="M:YLib.Expansion.KeyBoardHooker.Start">
            <summary>
            Set hook KeyBoard
            </summary>
            <returns>Return good if hook is setted</returns>
        </member>
        <member name="M:YLib.Expansion.FileSystem.DirectoryDelete(System.String)">
            <summary>
            Delete directory with inside files
            </summary>
        </member>
        <member name="M:YLib.Expansion.FileSystem.DirectoryCopy(System.String,System.String,System.Boolean)">
            <summary>
            Copy directory with inside files in new path
            </summary>
            <param name="sourcePath">Full name of source directory</param>
            <param name="destPath">Path of destination</param>
            <param name="replaceDirectory">Set true, if before copy need delete existable destination directory</param>
        </member>
        <member name="M:YLib.Expansion.FileSystem.DirectoryCopy(System.String,System.String,System.Boolean,System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.Regex)">
            <summary>
            Copy directory with inside files in new path
            </summary>
            <param name="sourcePath">Full name of source directory</param>
            <param name="destPath">Path of destination directory (only name directory)</param>
            <param name="replaceDirectory">Set true, if before copy need delete existable destDirectory</param>
            <param name="filterNoFiles">Regex pattern for none copyied files</param>
            <param name="filterNoPath">Regex pattern for none copyied folders</param>
        </member>
        <member name="M:YLib.Expansion.FileSystem.Get_PathName(System.String)">
            <summary>
            Получает имя последней директории в указанном пути
            </summary>
            <param name="fullPath">Полный путь</param>
        </member>
        <member name="M:YLib.Expansion.FileSystem.Get_NameFileOrPath(System.String)">
            <summary>
            Получает только Имя файла с расширением или Имя последней директории
            </summary>
            <param name="_fullPath">путь из которого извлекается имя</param>
        </member>
        <member name="M:YLib.Expansion.FileSystem.Get_FileOrPath(System.String)">
            <summary>
            Определение типа объекта: папка или файл
            </summary>
            <param name="_path">Путь к папке/файлу</param>
            <returns>возвращает в true если file, либо false если directory;</returns>
        </member>
        <member name="M:YLib.Expansion.FileSystem.Exist_FileOrPath(System.String)">
            <summary>
            Проверка пути (файла)
            </summary>
            <param name="_path">Путь к папке/файлу</param>
            <returns>возвращает true, если объект существует</returns>
        </member>
        <member name="M:YLib.Expansion.FileSystem.GetDirectory(System.String)">
            <summary>
            Return path without file name
            </summary>
        </member>
        <member name="M:YLib.Expansion.FileSystem.CopyByDifference(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Копирование различающихся файлов в указанную директорию
            </summary>
        </member>
        <member name="M:YLib.Expansion.FileSystem.Get_AllFiles(System.String,System.Boolean)">
            <summary>
            Получение List'a всех названией файлов в указанной директории
            </summary>
            <param name="sourceDirName">Путь к объекту</param>
        </member>
        <member name="M:YLib.Expansion.FileSystem.Give_AllFiles(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Получение всех названией файлов в указанной директории
            </summary>
            <param name="sourceDirName">Путь к объекту</param>
        </member>
        <member name="M:YLib.Expansion.FileSystem.Log_AllFiles(System.String,System.String)">
            <summary>
            Получение всех названией файлов/папок указанной директории и сохранение в текстовый файл
            </summary>
            <param name="sourceDirName">Путь к объекту</param>
            <param name="_fileName">Путь куда сохранять</param>
        </member>
        <member name="M:YLib.Expansion.FileSystem.Log_AllFilesNoDelDir(System.IO.StreamWriter,System.String,System.String)">
            <summary>
            Получение всех названией файлов/папок указанной директории и сохранение в текстовый файл
            </summary>
            <param name="sourceDirName">Путь к объекту</param>
            <param name="parentDirName">Путь куда сохранять</param>
        </member>
        <member name="M:YLib.Expansion.FileSystem.AppendLine(System.String,System.Object)">
            <summary>
            Добавление строки в указанный файл (если нет директории - создаем, если нет файла - создаем)
            </summary>
            <param name="fileName">полный путь к файлу</param>
            <param name="text">объект с текстом, который нужно записать</param>
        </member>
        <member name="M:YLib.Expansion.FileSystem.Log_Append(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Добавление текста в лог-файл
            </summary>
            <param name="_fileName">Имя (путь) лог-файла</param>
            <param name="_txt">Добавляемый текст</param>
            <param name="maxNumEventsLog">максимальное количество лог-событий</param>
            <param name="msgException">true, если включить вывод exception-сообщений</param>
        </member>
        <member name="M:YLib.Expansion.FileSystem.Log_AppendWithTime(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Добавление текста (c меткой времени) в лог-файл
            </summary>
            <param name="_fileName">Имя (путь) лог-файла</param>
            <param name="_txt">Добавляемый текст</param>
            <param name="maxNumEventsLog">максимальное количество лог-событий</param>
            <param name="msgException">true, если включить вывод exception-сообщений</param>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.ACTIVATE">
             <summary>
            The WM_ACTIVATE message is sent when a window is being activated or deactivated. This message is sent first to the window procedure of the top-level window being deactivated;
             it is then sent to the window procedure of the top-level window being activated.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.ACTIVATEAPP">
             <summary>
            The WM_ACTIVATEAPP message is sent when a window belonging to a different application than the active window is about to be activated. The message is sent to the application whose window is being activated and to the application whose window is being deactivated.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.AFXFIRST">
             <summary>
            The WM_AFXFIRST specifies the first afx message.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.AFXLAST">
             <summary>
            The WM_AFXFIRST specifies the last afx message.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.APP">
             <summary>
            The WM_APP constant is used by applications to help define private messages, usually of the form WM_APP+X, where X is an integer value.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.ASKCBFORMATNAME">
             <summary>
            The WM_ASKCBFORMATNAME message is sent to the clipboard owner by a clipboard viewer window to request the name of a CF_OWNERDISPLAY clipboard format.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.CANCELJOURNAL">
             <summary>
            The WM_CANCELJOURNAL message is posted to an application when a user cancels the application's journaling activities. The message is posted with a NULL window handle.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.CANCELMODE">
             <summary>
            The WM_CANCELMODE message is sent to cancel certain modes, such as mouse capture. For example, the system sends this message to the active window when a dialog box or message box is displayed. Certain functions also send this message explicitly to the specified window regardless of whether it is the active window. For example, the EnableWindow function sends this message when disabling the specified window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.CAPTURECHANGED">
             <summary>
            The WM_CAPTURECHANGED message is sent to the window that is losing the mouse capture.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.CHANGECBCHAIN">
             <summary>
            The WM_CHANGECBCHAIN message is sent to the first window in the clipboard viewer chain when a window is being removed from the chain.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.CHANGEUISTATE">
             <summary>
            An application sends the WM_CHANGEUISTATE message to indicate that the user interface (UI) state should be changed.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.CHAR">
             <summary>
            The WM_CHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_CHAR message contains the character code of the key that was pressed.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.CHARTOITEM">
             <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_CHAR message.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.CHILDACTIVATE">
             <summary>
            The WM_CHILDACTIVATE message is sent to a child window when the user clicks the window's title bar or when the window is activated, moved, or sized.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.CLEAR">
             <summary>
            An application sends a WM_CLEAR message to an edit control or combo box to delete (clear) the current selection, if any, from the edit control.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.CLOSE">
             <summary>
            The WM_CLOSE message is sent as a signal that a window or an application should terminate.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.COMMAND">
             <summary>
            The WM_COMMAND message is sent when the user selects a command item from a menu, when a control sends a notification message to its parent window, or when an accelerator keystroke is translated.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.COMPACTING">
             <summary>
            The WM_COMPACTING message is sent to all top-level windows when the system detects more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory. This indicates that system memory is low.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.COMPAREITEM">
             <summary>
            The system sends the WM_COMPAREITEM message to determine the relative position of a new item in the sorted list of an owner-drawn combo box or list box. Whenever the application adds a new item, the system sends this message to the owner of a combo box or list box created with the CBS_SORT or LBS_SORT style.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.CONTEXTMENU">
             <summary>
            The WM_CONTEXTMENU message notifies a window that the user clicked the right mouse button (right-clicked) in the window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.COPY">
             <summary>
            An application sends the WM_COPY message to an edit control or combo box to copy the current selection to the clipboard in CF_TEXT format.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.COPYDATA">
             <summary>
            An application sends the WM_COPYDATA message to pass data to another application.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.CREATE">
             <summary>
            The WM_CREATE message is sent when an application requests that a window be created by calling theCreateWindowEx or CreateWindow function. (The message is sent before the function returns.) The window procedure of the new window receives this message after the window is created, but before the window becomes visible.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.CTLCOLORBTN">
             <summary>
            The WM_CTLCOLORBTN message is sent to the parent window of a button before drawing the button. The parent window can change the button's text and background colors. However, only owner-drawn buttons respond to the parent window processing this message.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.CTLCOLORDLG">
             <summary>
            The WM_CTLCOLORDLG message is sent to a dialog box before the system draws the dialog box. By responding to this message, the dialog box can set its text and background colors using the specified display device context handle.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.CTLCOLOREDIT">
             <summary>
            An edit control that is not read-only or disabled sends the WM_CTLCOLOREDIT message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the edit control.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.CTLCOLORLISTBOX">
             <summary>
            Sent to the parent window of a list box before the system draws the list box. By responding to this message, the parent window can set the text and background colors of the list box by using the specified display device context handle.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.CTLCOLORMSGBOX">
             <summary>
            The WM_CTLCOLORMSGBOX message is sent to the owner window of a message box before Windows draws the message box. By responding to this message, the owner window can set the text and background colors of the message box by using the given display device context handle.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.CTLCOLORSCROLLBAR">
             <summary>
            The WM_CTLCOLORSCROLLBAR message is sent to the parent window of a scroll bar control when the control is about to be drawn. By responding to this message, the parent window can use the display context handle to set the background color of the scroll bar control.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.CTLCOLORSTATIC">
             <summary>
            A static control, or an edit control that is read-only or disabled, sends the WM_CTLCOLORSTATIC message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the static control.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.CUT">
             <summary>
            An application sends a WM_CUT message to an edit control or combo box to delete (cut) the current selection, if any, in the edit control and copy the deleted text to the clipboard in CF_TEXT format.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.DEADCHAR">
             <summary>
            The WM_DEADCHAR message is posted to the window with the keyboard focus when a WM_KEYUP message is translated by the TranslateMessage function. WM_DEADCHAR specifies a character code generated by a dead key. A dead key is a key that generates a character, such as the umlaut (double-dot), that is combined with another character to form a composite character. For example, the umlaut-O character (Ö) is generated by typing the dead key for the umlaut character, and then typing the O key.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.DELETEITEM">
             <summary>
            Sent to the owner of a list box or combo box when the list box or combo box is destroyed or when items are removed by the LB_DELETESTRING, LB_RESETCONTENT, CB_DELETESTRING, or CB_RESETCONTENT message. The system sends a WM_DELETEITEM message for each deleted item. The system sends the WM_DELETEITEM message for any deleted list box or combo box item with nonzero item data.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.DESTROY">
             <summary>
            The WM_DESTROY message is sent when a window is being destroyed. It is sent to the window procedure of the window being destroyed after the window is removed from the screen. This message is sent first to the window being destroyed and then to the child windows (if any) as they are destroyed. During the processing of the message, it can be assumed that all child windows still exist.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.DESTROYCLIPBOARD">
             <summary>
            The WM_DESTROYCLIPBOARD message is sent to the clipboard owner when a call to the EmptyClipboard function empties the clipboard.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.DEVICECHANGE">
             <summary>
            Notifies an application of a change to the hardware configuration of a device or the computer.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.DEVMODECHANGE">
             <summary>
            The WM_DEVMODECHANGE message is sent to all top-level windows whenever the user changes device-mode settings.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.DISPLAYCHANGE">
             <summary>
            The WM_DISPLAYCHANGE message is sent to all windows when the display resolution has changed.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.DRAWCLIPBOARD">
             <summary>
            The WM_DRAWCLIPBOARD message is sent to the first window in the clipboard viewer chain when the content of the clipboard changes. This enables a clipboard viewer window to display the new content of the clipboard.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.DRAWITEM">
             <summary>
            The WM_DRAWITEM message is sent to the parent window of an owner-drawn button, combo box, list box, or menu when a visual aspect of the button, combo box, list box, or menu has changed.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.DROPFILES">
             <summary>
            Sent when the user drops a file on the window of an application that has registered itself as a recipient of dropped files.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.ENABLE">
             <summary>
            The WM_ENABLE message is sent when an application changes the enabled state of a window. It is sent to the window whose enabled state is changing. This message is sent before the EnableWindow function returns, but after the enabled state (WS_DISABLED style bit) of the window has changed.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.ENDSESSION">
             <summary>
            The WM_ENDSESSION message is sent to an application after the system processes the results of the WM_QUERYENDSESSION message. The WM_ENDSESSION message informs the application whether the session is ending.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.ENTERIDLE">
             <summary>
            The WM_ENTERIDLE message is sent to the owner window of a modal dialog box or menu that is entering an idle state. A modal dialog box or menu enters an idle state when no messages are waiting in its queue after it has processed one or more previous messages.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.ENTERMENULOOP">
             <summary>
            The WM_ENTERMENULOOP message informs an application's main window procedure that a menu modal loop has been entered.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.ENTERSIZEMOVE">
             <summary>
            The WM_ENTERSIZEMOVE message is sent one time to a window after it enters the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete whenDefWindowProc returns.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.ERASEBKGND">
             <summary>
            The WM_ERASEBKGND message is sent when the window background must be erased (for example, when a window is resized). The message is sent to prepare an invalidated portion of a window for painting.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.EXITMENULOOP">
             <summary>
            The WM_EXITMENULOOP message informs an application's main window procedure that a menu modal loop has been exited.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.EXITSIZEMOVE">
             <summary>
            The WM_EXITSIZEMOVE message is sent one time to a window, after it has exited the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete whenDefWindowProc returns.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.FONTCHANGE">
             <summary>
            An application sends the WM_FONTCHANGE message to all top-level windows in the system after changing the pool of font resources.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.GETDLGCODE">
             <summary>
            The WM_GETDLGCODE message is sent to the window procedure associated with a control. By default, the system handles all keyboard input to the control,
             the system interprets certain types of keyboard input as dialog box navigation keys. To override this default behavior, the control can respond to the WM_GETDLGCODE message to indicate the types of input it wants to process itself.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.GETFONT">
             <summary>
            An application sends a WM_GETFONT message to a control to retrieve the font with which the control is currently drawing its text.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.GETHOTKEY">
             <summary>
            An application sends a WM_GETHOTKEY message to determine the hot key associated with a window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.GETICON">
             <summary>
            The WM_GETICON message is sent to a window to retrieve a handle to the large or small icon associated with a window. The system displays the large icon in the ALT+TAB dialog, and the small icon in the window caption.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.GETMINMAXINFO">
             <summary>
            The WM_GETMINMAXINFO message is sent to a window when the size or position of the window is about to change. An application can use this message to override the window's default maximized size and position, or its default minimum or maximum tracking size.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.GETOBJECT">
             <summary>
            Active Accessibility sends the WM_GETOBJECT message to obtain information about an accessible object contained in a server application. Applications never send this message directly. It is sent only by Active Accessibility in response to calls to AccessibleObjectFromPoint, AccessibleObjectFromEvent, or AccessibleObjectFromWindow. However, server applications handle this message.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.GETTEXT">
             <summary>
            An application sends a WM_GETTEXT message to copy the text that corresponds to a window into a buffer provided by the caller.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.GETTEXTLENGTH">
             <summary>
            An application sends a WM_GETTEXTLENGTH message to determine the length, in characters, of the text associated with a window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.HANDHELDFIRST">
             <summary>
            Definition Needed
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.HANDHELDLAST">
             <summary>
            Definition Needed
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.HELP">
             <summary>
            Indicates that the user pressed the F1 key. If a menu is active when F1 is pressed, WM_HELP is sent to the window associated with the menu;
             otherwise, WM_HELP is sent to the window that has the keyboard focus. If no window has the keyboard focus, WM_HELP is sent to the currently active window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.HOTKEY">
             <summary>
            The WM_HOTKEY message is posted when the user presses a hot key registered by the RegisterHotKey function. The message is placed at the top of the message queue associated with the thread that registered the hot key.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.HSCROLL">
             <summary>
            This message is sent to a window when a scroll event occurs in the window's standard horizontal scroll bar. This message is also sent to the owner of a horizontal scroll bar control when a scroll event occurs in the control.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.HSCROLLCLIPBOARD">
             <summary>
            The WM_HSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window. This occurs when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's horizontal scroll bar. The owner should scroll the clipboard image and update the scroll bar values.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.ICONERASEBKGND">
             <summary>
            Windows NT 3.51 and earlier: The WM_ICONERASEBKGND message is sent to a minimized window when the background of the icon must be filled before painting the icon. A window receives this message only if a class icon is defined for the window;
             otherwise, WM_ERASEBKGND is sent. This message is not sent by newer versions of Windows.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.IME_CHAR">
             <summary>
            Sent to an application when the IME gets a character of the conversion result. A window receives this message through its WindowProc function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.IME_COMPOSITION">
             <summary>
            Sent to an application when the IME changes composition status as a result of a keystroke. A window receives this message through its WindowProc function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.IME_COMPOSITIONFULL">
             <summary>
            Sent to an application when the IME window finds no space to extend the area for the composition window. A window receives this message through its WindowProc function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.IME_CONTROL">
             <summary>
            Sent by an application to direct the IME window to carry out the requested command. The application uses this message to control the IME window that it has created. To send this message, the application calls theSendMessage function with the following parameters.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.IME_ENDCOMPOSITION">
             <summary>
            Sent to an application when the IME ends composition. A window receives this message through its WindowProcfunction.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.IME_KEYDOWN">
             <summary>
            Sent to an application by the IME to notify the application of a key press and to keep message order. A window receives this message through its WindowProc function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.IME_KEYLAST">
             <summary>
            Definition Needed
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.IME_KEYUP">
             <summary>
            Sent to an application by the IME to notify the application of a key release and to keep message order. A window receives this message through its WindowProc function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.IME_NOTIFY">
             <summary>
            Sent to an application to notify it of changes to the IME window. A window receives this message through itsWindowProc function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.IME_REQUEST">
             <summary>
            Sent to an application to provide commands and request information. A window receives this message through itsWindowProc function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.IME_SELECT">
             <summary>
            Sent to an application when the operating system is about to change the current IME. A window receives this message through its WindowProc function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.IME_SETCONTEXT">
             <summary>
            Sent to an application when a window is activated. A window receives this message through its WindowProc function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.IME_STARTCOMPOSITION">
             <summary>
            Sent immediately before the IME generates the composition string as a result of a keystroke. A window receives this message through its WindowProc function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.INITDIALOG">
             <summary>
            The WM_INITDIALOG message is sent to the dialog box procedure immediately before a dialog box is displayed. Dialog box procedures typically use this message to initialize controls and carry out any other initialization tasks that affect the appearance of the dialog box.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.INITMENU">
             <summary>
            The WM_INITMENU message is sent when a menu is about to become active. It occurs when the user clicks an item on the menu bar or presses a menu key. This allows the application to modify the menu before it is displayed.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.INITMENUPOPUP">
             <summary>
            The WM_INITMENUPOPUP message is sent when a drop-down menu or submenu is about to become active. This allows an application to modify the menu before it is displayed, without changing the entire menu.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.INPUTLANGCHANGE">
             <summary>
            The WM_INPUTLANGCHANGE message is sent to the topmost affected window after an application's input language has been changed. You should make any application-specific settings and pass the message to theDefWindowProc function, which passes the message to all first-level child windows. These child windows can pass the message to DefWindowProc to have it pass the message to their child windows, and so on.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.INPUTLANGCHANGEREQUEST">
             <summary>
            The WM_INPUTLANGCHANGEREQUEST message is posted to the window with the focus when the user chooses a new input language, either with the hotkey (specified in the Keyboard control panel application) or from the indicator on the system taskbar. An application can accept the change by passing the message to the DefWindowProcfunction or reject the change (and prevent it from taking place) by returning immediately.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.KEYDOWN">
             <summary>
            The WM_KEYDOWN message is posted to the window with the keyboard focus when a nonsystem key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.KEYFIRST">
             <summary>
            This message filters for keyboard messages.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.KEYLAST">
             <summary>
            This message filters for keyboard messages.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.KEYUP">
             <summary>
            The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed, or a keyboard key that is pressed when a window has the keyboard focus.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.KILLFOCUS">
             <summary>
            The WM_KILLFOCUS message is sent to a window immediately before it loses the keyboard focus.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.LBUTTONDBLCLK">
             <summary>
            The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.LBUTTONDOWN">
             <summary>
            The WM_LBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.LBUTTONUP">
             <summary>
            The WM_LBUTTONUP message is posted when the user releases the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MBUTTONDBLCLK">
             <summary>
            The WM_MBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MBUTTONDOWN">
             <summary>
            The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MBUTTONUP">
             <summary>
            The WM_MBUTTONUP message is posted when the user releases the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MDIACTIVATE">
             <summary>
            An application sends the WM_MDIACTIVATE message to a multiple-document interface (MDI) client window to instruct the client window to activate a different MDI child window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MDICASCADE">
             <summary>
            An application sends the WM_MDICASCADE message to a multiple-document interface (MDI) client window to arrange all its child windows in a cascade format.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MDICREATE">
             <summary>
            An application sends the WM_MDICREATE message to a multiple-document interface (MDI) client window to create an MDI child window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MDIDESTROY">
             <summary>
            An application sends the WM_MDIDESTROY message to a multiple-document interface (MDI) client window to close an MDI child window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MDIGETACTIVE">
             <summary>
            An application sends the WM_MDIGETACTIVE message to a multiple-document interface (MDI) client window to retrieve the handle to the active MDI child window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MDIICONARRANGE">
             <summary>
            An application sends the WM_MDIICONARRANGE message to a multiple-document interface (MDI) client window to arrange all minimized MDI child windows. It does not affect child windows that are not minimized.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MDIMAXIMIZE">
             <summary>
            An application sends the WM_MDIMAXIMIZE message to a multiple-document interface (MDI) client window to maximize an MDI child window. The system resizes the child window to make its client area fill the client window. The system places the child window's window menu icon in the rightmost position of the frame window's menu bar, and places the child window's restore icon in the leftmost position. The system also appends the title bar text of the child window to that of the frame window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MDINEXT">
             <summary>
            An application sends the WM_MDINEXT message to a multiple-document interface (MDI) client window to activate the next or previous child window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MDIREFRESHMENU">
             <summary>
            An application sends the WM_MDIREFRESHMENU message to a multiple-document interface (MDI) client window to refresh the window menu of the MDI frame window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MDIRESTORE">
             <summary>
            An application sends the WM_MDIRESTORE message to a multiple-document interface (MDI) client window to restore an MDI child window from maximized or minimized size.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MDISETMENU">
             <summary>
            An application sends the WM_MDISETMENU message to a multiple-document interface (MDI) client window to replace the entire menu of an MDI frame window, to replace the window menu of the frame window, or both.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MDITILE">
             <summary>
            An application sends the WM_MDITILE message to a multiple-document interface (MDI) client window to arrange all of its MDI child windows in a tile format.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MEASUREITEM">
             <summary>
            The WM_MEASUREITEM message is sent to the owner window of a combo box, list box, list view control, or menu item when the control or menu is created.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MENUCHAR">
             <summary>
            The WM_MENUCHAR message is sent when a menu is active and the user presses a key that does not correspond to any mnemonic or accelerator key. This message is sent to the window that owns the menu.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MENUCOMMAND">
             <summary>
            The WM_MENUCOMMAND message is sent when the user makes a selection from a menu.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MENUDRAG">
             <summary>
            The WM_MENUDRAG message is sent to the owner of a drag-and-drop menu when the user drags a menu item.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MENUGETOBJECT">
             <summary>
            The WM_MENUGETOBJECT message is sent to the owner of a drag-and-drop menu when the mouse cursor enters a menu item or moves from the center of the item to the top or bottom of the item.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MENURBUTTONUP">
             <summary>
            The WM_MENURBUTTONUP message is sent when the user releases the right mouse button while the cursor is on a menu item.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MENUSELECT">
             <summary>
            The WM_MENUSELECT message is sent to a menu's owner window when the user selects a menu item.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MOUSEACTIVATE">
             <summary>
            The WM_MOUSEACTIVATE message is sent when the cursor is in an inactive window and the user presses a mouse button. The parent window receives this message only if the child window passes it to the DefWindowProcfunction.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MOUSEFIRST">
             <summary>
            Use WM_MOUSEFIRST to specify the first mouse message. Use the PeekMessage() Function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MOUSEHOVER">
             <summary>
            The WM_MOUSEHOVER message is posted to a window when the cursor hovers over the client area of the window for the period of time specified in a prior call to TrackMouseEvent.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MOUSELAST">
             <summary>
            Definition Needed
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MOUSELEAVE">
             <summary>
            The WM_MOUSELEAVE message is posted to a window when the cursor leaves the client area of the window specified in a prior call to TrackMouseEvent.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MOUSEMOVE">
             <summary>
            The WM_MOUSEMOVE message is posted to a window when the cursor moves. If the mouse is not captured, the message is posted to the window that contains the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MOUSEWHEEL">
             <summary>
            The WM_MOUSEWHEEL message is sent to the focus window when the mouse wheel is rotated. TheDefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MOUSEHWHEEL">
             <summary>
            The WM_MOUSEHWHEEL message is sent to the focus window when the mouse's horizontal scroll wheel is tilted or rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MOVE">
             <summary>
            The WM_MOVE message is sent after a window has been moved.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.MOVING">
             <summary>
            The WM_MOVING message is sent to a window that the user is moving. By processing this message, an application can monitor the position of the drag rectangle and, if needed, change its position.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NCACTIVATE">
             <summary>
            Non Client Area Activated Caption(Title) of the Form
            </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NCCALCSIZE">
             <summary>
            The WM_NCCALCSIZE message is sent when the size and position of a window's client area must be calculated. By processing this message, an application can control the content of the window's client area when the size or position of the window changes.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NCCREATE">
             <summary>
            The WM_NCCREATE message is sent prior to the WM_CREATE message when a window is first created.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NCDESTROY">
             <summary>
            The WM_NCDESTROY message informs a window that its nonclient area is being destroyed. The DestroyWindowfunction sends the WM_NCDESTROY message to the window following the WM_DESTROY message. WM_DESTROY is used to free the allocated memory object associated with the window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NCHITTEST">
             <summary>
            The WM_NCHITTEST message is sent to a window when the cursor moves, or when a mouse button is pressed or released. If the mouse is not captured, the message is sent to the window beneath the cursor. Otherwise, the message is sent to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NCLBUTTONDBLCLK">
             <summary>
            The WM_NCLBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NCLBUTTONDOWN">
             <summary>
            The WM_NCLBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NCLBUTTONUP">
             <summary>
            The WM_NCLBUTTONUP message is posted when the user releases the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NCMBUTTONDBLCLK">
             <summary>
            The WM_NCMBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NCMBUTTONDOWN">
             <summary>
            The WM_NCMBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NCMBUTTONUP">
             <summary>
            The WM_NCMBUTTONUP message is posted when the user releases the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NCMOUSEHOVER">
             <summary>
            The WM_NCMOUSEHOVER message is posted to a window when the cursor hovers over the nonclient area of the window for the period of time specified in a prior call to TrackMouseEvent.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NCMOUSELEAVE">
             <summary>
            The WM_NCMOUSELEAVE message is posted to a window when the cursor leaves the nonclient area of the window specified in a prior call to TrackMouseEvent.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NCMOUSEMOVE">
             <summary>
            The WM_NCMOUSEMOVE message is posted to a window when the cursor is moved within the nonclient area of the window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NCPAINT">
             <summary>
            The WM_NCPAINT message is sent to a window when its frame must be painted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NCRBUTTONDBLCLK">
             <summary>
            The WM_NCRBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NCRBUTTONDOWN">
             <summary>
            The WM_NCRBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NCRBUTTONUP">
             <summary>
            The WM_NCRBUTTONUP message is posted when the user releases the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NCXBUTTONDBLCLK">
             <summary>
            The WM_NCXBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NCXBUTTONDOWN">
             <summary>
            The WM_NCXBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NCXBUTTONUP">
             <summary>
            The WM_NCXBUTTONUP message is posted when the user releases the first or second X button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NCUAHDRAWCAPTION">
             <summary>
            The WM_NCUAHDRAWCAPTION message is an undocumented message related to themes. When handling WM_NCPAINT, this message should also be handled.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NCUAHDRAWFRAME">
             <summary>
            The WM_NCUAHDRAWFRAME message is an undocumented message related to themes. When handling WM_NCPAINT, this message should also be handled.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NEXTDLGCTL">
             <summary>
            The WM_NEXTDLGCTL message is sent to a dialog box procedure to set the keyboard focus to a different control in the dialog box
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NEXTMENU">
             <summary>
            The WM_NEXTMENU message is sent to an application when the right or left arrow key is used to switch between the menu bar and the system menu.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NOTIFY">
             <summary>
            Sent by a common control to its parent window when an event has occurred or the control requires some information.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NOTIFYFORMAT">
             <summary>
            Determines if a window accepts ANSI or Unicode structures in the WM_NOTIFY notification message. WM_NOTIFYFORMAT messages are sent from a common control to its parent window and from the parent window to the common control.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.NULL">
             <summary>
            The WM_NULL message performs no operation. An application sends the WM_NULL message if it wants to post a message that the recipient window will ignore.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.PAINT">
             <summary>
            Occurs when the control needs repainting
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.PAINTCLIPBOARD">
             <summary>
            The WM_PAINTCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area needs repainting.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.PAINTICON">
             <summary>
            Windows NT 3.51 and earlier: The WM_PAINTICON message is sent to a minimized window when the icon is to be painted. This message is not sent by newer versions of Microsoft Windows, except in unusual circumstances explained in the Remarks.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.PALETTECHANGED">
             <summary>
            This message is sent by the OS to all top-level and overlapped windows after the window with the keyboard focus realizes its logical palette. This message enables windows that do not have the keyboard focus to realize their logical palettes and update their client areas.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.PALETTEISCHANGING">
             <summary>
            The WM_PALETTEISCHANGING message informs applications that an application is going to realize its logical palette.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.PARENTNOTIFY">
             <summary>
            The WM_PARENTNOTIFY message is sent to the parent of a child window when the child window is created or destroyed, or when the user clicks a mouse button while the cursor is over the child window. When the child window is being created, the system sends WM_PARENTNOTIFY just before the CreateWindow or CreateWindowExfunction that creates the window returns. When the child window is being destroyed, the system sends the message before any processing to destroy the window takes place.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.PASTE">
             <summary>
            An application sends a WM_PASTE message to an edit control or combo box to copy the current content of the clipboard to the edit control at the current caret position. Data is inserted only if the clipboard contains data in CF_TEXT format.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.PENWINFIRST">
             <summary>
            Definition Needed/// 
            </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.PENWINLAST">
             <summary>
            Definition Needed
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.POWER">
             <summary>
            Notifies applications that the system, typically a battery-powered personal computer, is about to enter a suspended mode. Obsolete : use POWERBROADCAST instead///
            </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.POWERBROADCAST">
             <summary>
            Notifies applications that a power-management event has occurred.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.PRINT">
             <summary>
            The WM_PRINT message is sent to a window to request that it draw itself in the specified device context, most commonly in a printer device context.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.PRINTCLIENT">
             <summary>
            The WM_PRINTCLIENT message is sent to a window to request that it draw its client area in the specified device context, most commonly in a printer device context.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.QUERYDRAGICON">
             <summary>
            The WM_QUERYDRAGICON message is sent to a minimized (iconic) window. The window is about to be dragged by the user but does not have an icon defined for its class. An application can return a handle to an icon or cursor. The system displays this cursor or icon while the user drags the icon.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.QUERYENDSESSION">
             <summary>
            The WM_QUERYENDSESSION message is sent when the user chooses to end the session or when an application calls one of the system shutdown functions. If any application returns zero, the session is not ended. The system stops sending WM_QUERYENDSESSION messages as soon as one application returns zero. After processing this message, the system sends the WM_ENDSESSION message with the wParam parameter set to the results of the WM_QUERYENDSESSION message.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.QUERYNEWPALETTE">
             <summary>
            This message informs a window that it is about to receive the keyboard focus, giving the window the opportunity to realize its logical palette when it receives the focus.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.QUERYOPEN">
             <summary>
            The WM_QUERYOPEN message is sent to an icon when the user requests that the window be restored to its previous size and position.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.QUEUESYNC">
             <summary>
            The WM_QUEUESYNC message is sent by a computer-based training (CBT) application to separate user-input messages from other messages sent through the WH_JOURNALPLAYBACK Hook procedure.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.QUIT">
             <summary>
            Once received, it ends the application's Message Loop, signaling the application to end. It can be sent by pressing Alt+F4, Clicking the X in the upper right-hand of the program, or going to File->Exit.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.RBUTTONDBLCLK">
             <summary>
            he WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.RBUTTONDOWN">
             <summary>
            The WM_RBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.RBUTTONUP">
             <summary>
            The WM_RBUTTONUP message is posted when the user releases the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.RENDERALLFORMATS">
             <summary>
            The WM_RENDERALLFORMATS message is sent to the clipboard owner before it is destroyed, if the clipboard owner has delayed rendering one or more clipboard formats. For the content of the clipboard to remain available to other applications, the clipboard owner must render data in all the formats it is capable of generating, and place the data on the clipboard by calling the SetClipboardData function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.RENDERFORMAT">
             <summary>
            The WM_RENDERFORMAT message is sent to the clipboard owner if it has delayed rendering a specific clipboard format and if an application has requested data in that format. The clipboard owner must render data in the specified format and place it on the clipboard by calling the SetClipboardData function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.SETCURSOR">
             <summary>
            The WM_SETCURSOR message is sent to a window if the mouse causes the cursor to move within a window and mouse input is not captured.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.SETFOCUS">
             <summary>
            When the controll got the focus
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.SETFONT">
             <summary>
            An application sends a WM_SETFONT message to specify the font that a control is to use when drawing text.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.SETHOTKEY">
             <summary>
            An application sends a WM_SETHOTKEY message to a window to associate a hot key with the window. When the user presses the hot key, the system activates the window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.SETICON">
             <summary>
            An application sends the WM_SETICON message to associate a new large or small icon with a window. The system displays the large icon in the ALT+TAB dialog box, and the small icon in the window caption.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.SETREDRAW">
             <summary>
            An application sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn or to prevent changes in that window from being redrawn.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.SETTEXT">
             <summary>
            Text / Caption changed on the control. An application sends a WM_SETTEXT message to set the text of a window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.SETTINGCHANGE">
             <summary>
            An application sends the WM_SETTINGCHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.SHOWWINDOW">
             <summary>
            The WM_SHOWWINDOW message is sent to a window when the window is about to be hidden or shown
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.SIZE">
             <summary>
            The WM_SIZE message is sent to a window after its size has changed.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.SIZECLIPBOARD">
             <summary>
            The WM_SIZECLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area has changed size.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.SIZING">
             <summary>
            The WM_SIZING message is sent to a window that the user is resizing. By processing this message, an application can monitor the size and position of the drag rectangle and, if needed, change its size or position.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.SPOOLERSTATUS">
             <summary>
            The WM_SPOOLERSTATUS message is sent from Print Manager whenever a job is added to or removed from the Print Manager queue.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.STYLECHANGED">
             <summary>
            The WM_STYLECHANGED message is sent to a window after the SetWindowLong function has changed one or more of the window's styles.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.STYLECHANGING">
             <summary>
            The WM_STYLECHANGING message is sent to a window when the SetWindowLong function is about to change one or more of the window's styles.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.SYNCPAINT">
             <summary>
            The WM_SYNCPAINT message is used to synchronize painting while avoiding linking independent GUI threads.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.SYSCHAR">
             <summary>
            The WM_SYSCHAR message is posted to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. It specifies the character code of a system character key — that is, a character key that is pressed while the ALT key is down.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.SYSCOLORCHANGE">
             <summary>
            This message is sent to all top-level windows when a change is made to a system color setting.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.SYSCOMMAND">
             <summary>
            A window receives this message when the user chooses a command from the Window menu (formerly known as the system or control menu) or when the user chooses the maximize button, minimize button, restore button, or close button.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.SYSDEADCHAR">
             <summary>
            The WM_SYSDEADCHAR message is sent to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. WM_SYSDEADCHAR specifies the character code of a system dead key — that is, a dead key that is pressed while holding down the ALT key.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.SYSKEYDOWN">
             <summary>
            The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user presses the F10 key (which activates the menu bar) or holds down the ALT key and then presses another key. It also occurs when no window currently has the keyboard focus;
             in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.SYSKEYUP">
             <summary>
            The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user releases a key that was pressed while the ALT key was held down. It also occurs when no window currently has the keyboard focus;
             in this case, the WM_SYSKEYUP message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.TCARD">
             <summary>
            Sent to an application that has initiated a training card with Microsoft Windows Help. The message informs the application when the user clicks an authorable button. An application initiates a training card by specifying the HELP_TCARD command in a call to the WinHelp function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.TIMECHANGE">
             <summary>
            A message that is sent whenever there is a change in the system time.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.TIMER">
             <summary>
            The WM_TIMER message is posted to the installing thread's message queue when a timer expires. The message is posted by the GetMessage or PeekMessage function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.UNDO">
             <summary>
            An application sends a WM_UNDO message to an edit control to undo the last operation. When this message is sent to an edit control, the previously deleted text is restored or the previously added text is deleted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.UNINITMENUPOPUP">
             <summary>
            The WM_UNINITMENUPOPUP message is sent when a drop-down menu or submenu has been destroyed.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.USER">
             <summary>
            The WM_USER constant is used by applications to help define private messages for use by private window classes, usually of the form WM_USER+X, where X is an integer value.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.USERCHANGED">
             <summary>
            The WM_USERCHANGED message is sent to all windows after the user has logged on or off. When the user logs on or off, the system updates the user-specific settings. The system sends this message immediately after updating the settings.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.VKEYTOITEM">
             <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_KEYDOWN message.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.VSCROLL">
             <summary>
            The WM_VSCROLL message is sent to a window when a scroll event occurs in the window's standard vertical scroll bar. This message is also sent to the owner of a vertical scroll bar control when a scroll event occurs in the control.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.VSCROLLCLIPBOARD">
             <summary>
            The WM_VSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's vertical scroll bar. The owner should scroll the clipboard image and update the scroll bar values.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.WINDOWPOSCHANGED">
             <summary>
            The WM_WINDOWPOSCHANGED message is sent to a window whose size, position, or place in the Z order has changed as a result of a call to the SetWindowPos function or another window-management function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.WINDOWPOSCHANGING">
             <summary>
            The WM_WINDOWPOSCHANGING message is sent to a window whose size, position, or place in the Z order is about to change as a result of a call to the SetWindowPos function or another window-management function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.WININICHANGE">
             <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI. Note The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.XBUTTONDBLCLK">
             <summary>
            The WM_XBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.XBUTTONDOWN">
             <summary>
            The WM_XBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const._EnumConst.XBUTTONUP">
             <summary>
            The WM_XBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.ACTIVATE">
             <summary>
            The WM_ACTIVATE message is sent when a window is being activated or deactivated. This message is sent first to the window procedure of the top-level window being deactivated;
             it is then sent to the window procedure of the top-level window being activated.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.ACTIVATEAPP">
             <summary>
            The WM_ACTIVATEAPP message is sent when a window belonging to a different application than the active window is about to be activated. The message is sent to the application whose window is being activated and to the application whose window is being deactivated.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.AFXFIRST">
             <summary>
            The WM_AFXFIRST specifies the first afx message.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.AFXLAST">
             <summary>
            The WM_AFXFIRST specifies the last afx message.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.APP">
             <summary>
            The WM_APP constant is used by applications to help define private messages, usually of the form WM_APP+X, where X is an integer value.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.ASKCBFORMATNAME">
             <summary>
            The WM_ASKCBFORMATNAME message is sent to the clipboard owner by a clipboard viewer window to request the name of a CF_OWNERDISPLAY clipboard format.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.CANCELJOURNAL">
             <summary>
            The WM_CANCELJOURNAL message is posted to an application when a user cancels the application's journaling activities. The message is posted with a NULL window handle.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.CANCELMODE">
             <summary>
            The WM_CANCELMODE message is sent to cancel certain modes, such as mouse capture. For example, the system sends this message to the active window when a dialog box or message box is displayed. Certain functions also send this message explicitly to the specified window regardless of whether it is the active window. For example, the EnableWindow function sends this message when disabling the specified window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.CAPTURECHANGED">
             <summary>
            The WM_CAPTURECHANGED message is sent to the window that is losing the mouse capture.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.CHANGECBCHAIN">
             <summary>
            The WM_CHANGECBCHAIN message is sent to the first window in the clipboard viewer chain when a window is being removed from the chain.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.CHANGEUISTATE">
             <summary>
            An application sends the WM_CHANGEUISTATE message to indicate that the user interface (UI) state should be changed.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.CHAR">
             <summary>
            The WM_CHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_CHAR message contains the character code of the key that was pressed.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.CHARTOITEM">
             <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_CHAR message.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.CHILDACTIVATE">
             <summary>
            The WM_CHILDACTIVATE message is sent to a child window when the user clicks the window's title bar or when the window is activated, moved, or sized.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.CLEAR">
             <summary>
            An application sends a WM_CLEAR message to an edit control or combo box to delete (clear) the current selection, if any, from the edit control.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.CLOSE">
             <summary>
            The WM_CLOSE message is sent as a signal that a window or an application should terminate.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.COMMAND">
             <summary>
            The WM_COMMAND message is sent when the user selects a command item from a menu, when a control sends a notification message to its parent window, or when an accelerator keystroke is translated.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.COMPACTING">
             <summary>
            The WM_COMPACTING message is sent to all top-level windows when the system detects more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory. This indicates that system memory is low.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.COMPAREITEM">
             <summary>
            The system sends the WM_COMPAREITEM message to determine the relative position of a new item in the sorted list of an owner-drawn combo box or list box. Whenever the application adds a new item, the system sends this message to the owner of a combo box or list box created with the CBS_SORT or LBS_SORT style.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.CONTEXTMENU">
             <summary>
            The WM_CONTEXTMENU message notifies a window that the user clicked the right mouse button (right-clicked) in the window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.COPY">
             <summary>
            An application sends the WM_COPY message to an edit control or combo box to copy the current selection to the clipboard in CF_TEXT format.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.COPYDATA">
             <summary>
            An application sends the WM_COPYDATA message to pass data to another application.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.CREATE">
             <summary>
            The WM_CREATE message is sent when an application requests that a window be created by calling theCreateWindowEx or CreateWindow function. (The message is sent before the function returns.) The window procedure of the new window receives this message after the window is created, but before the window becomes visible.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.CTLCOLORBTN">
             <summary>
            The WM_CTLCOLORBTN message is sent to the parent window of a button before drawing the button. The parent window can change the button's text and background colors. However, only owner-drawn buttons respond to the parent window processing this message.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.CTLCOLORDLG">
             <summary>
            The WM_CTLCOLORDLG message is sent to a dialog box before the system draws the dialog box. By responding to this message, the dialog box can set its text and background colors using the specified display device context handle.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.CTLCOLOREDIT">
             <summary>
            An edit control that is not read-only or disabled sends the WM_CTLCOLOREDIT message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the edit control.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.CTLCOLORLISTBOX">
             <summary>
            Sent to the parent window of a list box before the system draws the list box. By responding to this message, the parent window can set the text and background colors of the list box by using the specified display device context handle.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.CTLCOLORMSGBOX">
             <summary>
            The WM_CTLCOLORMSGBOX message is sent to the owner window of a message box before Windows draws the message box. By responding to this message, the owner window can set the text and background colors of the message box by using the given display device context handle.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.CTLCOLORSCROLLBAR">
             <summary>
            The WM_CTLCOLORSCROLLBAR message is sent to the parent window of a scroll bar control when the control is about to be drawn. By responding to this message, the parent window can use the display context handle to set the background color of the scroll bar control.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.CTLCOLORSTATIC">
             <summary>
            A static control, or an edit control that is read-only or disabled, sends the WM_CTLCOLORSTATIC message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the static control.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.CUT">
             <summary>
            An application sends a WM_CUT message to an edit control or combo box to delete (cut) the current selection, if any, in the edit control and copy the deleted text to the clipboard in CF_TEXT format.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.DEADCHAR">
             <summary>
            The WM_DEADCHAR message is posted to the window with the keyboard focus when a WM_KEYUP message is translated by the TranslateMessage function. WM_DEADCHAR specifies a character code generated by a dead key. A dead key is a key that generates a character, such as the umlaut (double-dot), that is combined with another character to form a composite character. For example, the umlaut-O character (Ö) is generated by typing the dead key for the umlaut character, and then typing the O key.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.DELETEITEM">
             <summary>
            Sent to the owner of a list box or combo box when the list box or combo box is destroyed or when items are removed by the LB_DELETESTRING, LB_RESETCONTENT, CB_DELETESTRING, or CB_RESETCONTENT message. The system sends a WM_DELETEITEM message for each deleted item. The system sends the WM_DELETEITEM message for any deleted list box or combo box item with nonzero item data.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.DESTROY">
             <summary>
            The WM_DESTROY message is sent when a window is being destroyed. It is sent to the window procedure of the window being destroyed after the window is removed from the screen. This message is sent first to the window being destroyed and then to the child windows (if any) as they are destroyed. During the processing of the message, it can be assumed that all child windows still exist.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.DESTROYCLIPBOARD">
             <summary>
            The WM_DESTROYCLIPBOARD message is sent to the clipboard owner when a call to the EmptyClipboard function empties the clipboard.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.DEVICECHANGE">
             <summary>
            Notifies an application of a change to the hardware configuration of a device or the computer.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.DEVMODECHANGE">
             <summary>
            The WM_DEVMODECHANGE message is sent to all top-level windows whenever the user changes device-mode settings.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.DISPLAYCHANGE">
             <summary>
            The WM_DISPLAYCHANGE message is sent to all windows when the display resolution has changed.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.DRAWCLIPBOARD">
             <summary>
            The WM_DRAWCLIPBOARD message is sent to the first window in the clipboard viewer chain when the content of the clipboard changes. This enables a clipboard viewer window to display the new content of the clipboard.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.DRAWITEM">
             <summary>
            The WM_DRAWITEM message is sent to the parent window of an owner-drawn button, combo box, list box, or menu when a visual aspect of the button, combo box, list box, or menu has changed.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.DROPFILES">
             <summary>
            Sent when the user drops a file on the window of an application that has registered itself as a recipient of dropped files.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.ENABLE">
             <summary>
            The WM_ENABLE message is sent when an application changes the enabled state of a window. It is sent to the window whose enabled state is changing. This message is sent before the EnableWindow function returns, but after the enabled state (WS_DISABLED style bit) of the window has changed.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.ENDSESSION">
             <summary>
            The WM_ENDSESSION message is sent to an application after the system processes the results of the WM_QUERYENDSESSION message. The WM_ENDSESSION message informs the application whether the session is ending.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.ENTERIDLE">
             <summary>
            The WM_ENTERIDLE message is sent to the owner window of a modal dialog box or menu that is entering an idle state. A modal dialog box or menu enters an idle state when no messages are waiting in its queue after it has processed one or more previous messages.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.ENTERMENULOOP">
             <summary>
            The WM_ENTERMENULOOP message informs an application's main window procedure that a menu modal loop has been entered.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.ENTERSIZEMOVE">
             <summary>
            The WM_ENTERSIZEMOVE message is sent one time to a window after it enters the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete whenDefWindowProc returns.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.ERASEBKGND">
             <summary>
            The WM_ERASEBKGND message is sent when the window background must be erased (for example, when a window is resized). The message is sent to prepare an invalidated portion of a window for painting.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.EXITMENULOOP">
             <summary>
            The WM_EXITMENULOOP message informs an application's main window procedure that a menu modal loop has been exited.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.EXITSIZEMOVE">
             <summary>
            The WM_EXITSIZEMOVE message is sent one time to a window, after it has exited the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete whenDefWindowProc returns.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.FONTCHANGE">
             <summary>
            An application sends the WM_FONTCHANGE message to all top-level windows in the system after changing the pool of font resources.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.GETDLGCODE">
             <summary>
            The WM_GETDLGCODE message is sent to the window procedure associated with a control. By default, the system handles all keyboard input to the control;
             the system interprets certain types of keyboard input as dialog box navigation keys. To override this default behavior, the control can respond to the WM_GETDLGCODE message to indicate the types of input it wants to process itself.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.GETFONT">
             <summary>
            An application sends a WM_GETFONT message to a control to retrieve the font with which the control is currently drawing its text.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.GETHOTKEY">
             <summary>
            An application sends a WM_GETHOTKEY message to determine the hot key associated with a window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.GETICON">
             <summary>
            The WM_GETICON message is sent to a window to retrieve a handle to the large or small icon associated with a window. The system displays the large icon in the ALT+TAB dialog, and the small icon in the window caption.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.GETMINMAXINFO">
             <summary>
            The WM_GETMINMAXINFO message is sent to a window when the size or position of the window is about to change. An application can use this message to override the window's default maximized size and position, or its default minimum or maximum tracking size.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.GETOBJECT">
             <summary>
            Active Accessibility sends the WM_GETOBJECT message to obtain information about an accessible object contained in a server application. Applications never send this message directly. It is sent only by Active Accessibility in response to calls to AccessibleObjectFromPoint, AccessibleObjectFromEvent, or AccessibleObjectFromWindow. However, server applications handle this message.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.GETTEXT">
             <summary>
            An application sends a WM_GETTEXT message to copy the text that corresponds to a window into a buffer provided by the caller.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.GETTEXTLENGTH">
             <summary>
            An application sends a WM_GETTEXTLENGTH message to determine the length, in characters, of the text associated with a window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.HANDHELDFIRST">
             <summary>
            Definition Needed
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.HANDHELDLAST">
             <summary>
            Definition Needed
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.HELP">
             <summary>
            Indicates that the user pressed the F1 key. If a menu is active when F1 is pressed, WM_HELP is sent to the window associated with the menu;
             otherwise, WM_HELP is sent to the window that has the keyboard focus. If no window has the keyboard focus, WM_HELP is sent to the currently active window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.HOTKEY">
             <summary>
            The WM_HOTKEY message is posted when the user presses a hot key registered by the RegisterHotKey function. The message is placed at the top of the message queue associated with the thread that registered the hot key.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.HSCROLL">
             <summary>
            This message is sent to a window when a scroll event occurs in the window's standard horizontal scroll bar. This message is also sent to the owner of a horizontal scroll bar control when a scroll event occurs in the control.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.HSCROLLCLIPBOARD">
             <summary>
            The WM_HSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window. This occurs when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's horizontal scroll bar. The owner should scroll the clipboard image and update the scroll bar values.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.ICONERASEBKGND">
             <summary>
            Windows NT 3.51 and earlier: The WM_ICONERASEBKGND message is sent to a minimized window when the background of the icon must be filled before painting the icon. A window receives this message only if a class icon is defined for the window;
             otherwise, WM_ERASEBKGND is sent. This message is not sent by newer versions of Windows.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.IME_CHAR">
             <summary>
            Sent to an application when the IME gets a character of the conversion result. A window receives this message through its WindowProc function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.IME_COMPOSITION">
             <summary>
            Sent to an application when the IME changes composition status as a result of a keystroke. A window receives this message through its WindowProc function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.IME_COMPOSITIONFULL">
             <summary>
            Sent to an application when the IME window finds no space to extend the area for the composition window. A window receives this message through its WindowProc function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.IME_CONTROL">
             <summary>
            Sent by an application to direct the IME window to carry out the requested command. The application uses this message to control the IME window that it has created. To send this message, the application calls theSendMessage function with the following parameters.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.IME_ENDCOMPOSITION">
             <summary>
            Sent to an application when the IME ends composition. A window receives this message through its WindowProcfunction.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.IME_KEYDOWN">
             <summary>
            Sent to an application by the IME to notify the application of a key press and to keep message order. A window receives this message through its WindowProc function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.IME_KEYLAST">
             <summary>
            Definition Needed
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.IME_KEYUP">
             <summary>
            Sent to an application by the IME to notify the application of a key release and to keep message order. A window receives this message through its WindowProc function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.IME_NOTIFY">
             <summary>
            Sent to an application to notify it of changes to the IME window. A window receives this message through itsWindowProc function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.IME_REQUEST">
             <summary>
            Sent to an application to provide commands and request information. A window receives this message through itsWindowProc function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.IME_SELECT">
             <summary>
            Sent to an application when the operating system is about to change the current IME. A window receives this message through its WindowProc function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.IME_SETCONTEXT">
             <summary>
            Sent to an application when a window is activated. A window receives this message through its WindowProc function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.IME_STARTCOMPOSITION">
             <summary>
            Sent immediately before the IME generates the composition string as a result of a keystroke. A window receives this message through its WindowProc function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.INITDIALOG">
             <summary>
            The WM_INITDIALOG message is sent to the dialog box procedure immediately before a dialog box is displayed. Dialog box procedures typically use this message to initialize controls and carry out any other initialization tasks that affect the appearance of the dialog box.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.INITMENU">
             <summary>
            The WM_INITMENU message is sent when a menu is about to become active. It occurs when the user clicks an item on the menu bar or presses a menu key. This allows the application to modify the menu before it is displayed.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.INITMENUPOPUP">
             <summary>
            The WM_INITMENUPOPUP message is sent when a drop-down menu or submenu is about to become active. This allows an application to modify the menu before it is displayed, without changing the entire menu.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.INPUTLANGCHANGE">
             <summary>
            The WM_INPUTLANGCHANGE message is sent to the topmost affected window after an application's input language has been changed. You should make any application-specific settings and pass the message to theDefWindowProc function, which passes the message to all first-level child windows. These child windows can pass the message to DefWindowProc to have it pass the message to their child windows, and so on.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.INPUTLANGCHANGEREQUEST">
             <summary>
            The WM_INPUTLANGCHANGEREQUEST message is posted to the window with the focus when the user chooses a new input language, either with the hotkey (specified in the Keyboard control panel application) or from the indicator on the system taskbar. An application can accept the change by passing the message to the DefWindowProcfunction or reject the change (and prevent it from taking place) by returning immediately.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.KEYDOWN">
             <summary>
            The WM_KEYDOWN message is posted to the window with the keyboard focus when a nonsystem key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.KEYFIRST">
             <summary>
            This message filters for keyboard messages.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.KEYLAST">
             <summary>
            This message filters for keyboard messages.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.KEYUP">
             <summary>
            The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed, or a keyboard key that is pressed when a window has the keyboard focus.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.KILLFOCUS">
             <summary>
            The WM_KILLFOCUS message is sent to a window immediately before it loses the keyboard focus.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.LBUTTONDBLCLK">
             <summary>
            The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.LBUTTONDOWN">
             <summary>
            The WM_LBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.LBUTTONUP">
             <summary>
            The WM_LBUTTONUP message is posted when the user releases the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MBUTTONDBLCLK">
             <summary>
            The WM_MBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MBUTTONDOWN">
             <summary>
            The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MBUTTONUP">
             <summary>
            The WM_MBUTTONUP message is posted when the user releases the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MDIACTIVATE">
             <summary>
            An application sends the WM_MDIACTIVATE message to a multiple-document interface (MDI) client window to instruct the client window to activate a different MDI child window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MDICASCADE">
             <summary>
            An application sends the WM_MDICASCADE message to a multiple-document interface (MDI) client window to arrange all its child windows in a cascade format.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MDICREATE">
             <summary>
            An application sends the WM_MDICREATE message to a multiple-document interface (MDI) client window to create an MDI child window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MDIDESTROY">
             <summary>
            An application sends the WM_MDIDESTROY message to a multiple-document interface (MDI) client window to close an MDI child window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MDIGETACTIVE">
             <summary>
            An application sends the WM_MDIGETACTIVE message to a multiple-document interface (MDI) client window to retrieve the handle to the active MDI child window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MDIICONARRANGE">
             <summary>
            An application sends the WM_MDIICONARRANGE message to a multiple-document interface (MDI) client window to arrange all minimized MDI child windows. It does not affect child windows that are not minimized.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MDIMAXIMIZE">
             <summary>
            An application sends the WM_MDIMAXIMIZE message to a multiple-document interface (MDI) client window to maximize an MDI child window. The system resizes the child window to make its client area fill the client window. The system places the child window's window menu icon in the rightmost position of the frame window's menu bar, and places the child window's restore icon in the leftmost position. The system also appends the title bar text of the child window to that of the frame window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MDINEXT">
             <summary>
            An application sends the WM_MDINEXT message to a multiple-document interface (MDI) client window to activate the next or previous child window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MDIREFRESHMENU">
             <summary>
            An application sends the WM_MDIREFRESHMENU message to a multiple-document interface (MDI) client window to refresh the window menu of the MDI frame window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MDIRESTORE">
             <summary>
            An application sends the WM_MDIRESTORE message to a multiple-document interface (MDI) client window to restore an MDI child window from maximized or minimized size.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MDISETMENU">
             <summary>
            An application sends the WM_MDISETMENU message to a multiple-document interface (MDI) client window to replace the entire menu of an MDI frame window, to replace the window menu of the frame window, or both.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MDITILE">
             <summary>
            An application sends the WM_MDITILE message to a multiple-document interface (MDI) client window to arrange all of its MDI child windows in a tile format.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MEASUREITEM">
             <summary>
            The WM_MEASUREITEM message is sent to the owner window of a combo box, list box, list view control, or menu item when the control or menu is created.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MENUCHAR">
             <summary>
            The WM_MENUCHAR message is sent when a menu is active and the user presses a key that does not correspond to any mnemonic or accelerator key. This message is sent to the window that owns the menu.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MENUCOMMAND">
             <summary>
            The WM_MENUCOMMAND message is sent when the user makes a selection from a menu.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MENUDRAG">
             <summary>
            The WM_MENUDRAG message is sent to the owner of a drag-and-drop menu when the user drags a menu item.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MENUGETOBJECT">
             <summary>
            The WM_MENUGETOBJECT message is sent to the owner of a drag-and-drop menu when the mouse cursor enters a menu item or moves from the center of the item to the top or bottom of the item.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MENURBUTTONUP">
             <summary>
            The WM_MENURBUTTONUP message is sent when the user releases the right mouse button while the cursor is on a menu item.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MENUSELECT">
             <summary>
            The WM_MENUSELECT message is sent to a menu's owner window when the user selects a menu item.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MOUSEACTIVATE">
             <summary>
            The WM_MOUSEACTIVATE message is sent when the cursor is in an inactive window and the user presses a mouse button. The parent window receives this message only if the child window passes it to the DefWindowProcfunction.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MOUSEFIRST">
             <summary>
            Use WM_MOUSEFIRST to specify the first mouse message. Use the PeekMessage() Function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MOUSEHOVER">
             <summary>
            The WM_MOUSEHOVER message is posted to a window when the cursor hovers over the client area of the window for the period of time specified in a prior call to TrackMouseEvent.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MOUSELAST">
             <summary>
            Definition Needed
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MOUSELEAVE">
             <summary>
            The WM_MOUSELEAVE message is posted to a window when the cursor leaves the client area of the window specified in a prior call to TrackMouseEvent.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MOUSEMOVE">
             <summary>
            The WM_MOUSEMOVE message is posted to a window when the cursor moves. If the mouse is not captured, the message is posted to the window that contains the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MOUSEWHEEL">
             <summary>
            The WM_MOUSEWHEEL message is sent to the focus window when the mouse wheel is rotated. TheDefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MOUSEHWHEEL">
             <summary>
            The WM_MOUSEHWHEEL message is sent to the focus window when the mouse's horizontal scroll wheel is tilted or rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MOVE">
             <summary>
            The WM_MOVE message is sent after a window has been moved.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.MOVING">
             <summary>
            The WM_MOVING message is sent to a window that the user is moving. By processing this message, an application can monitor the position of the drag rectangle and, if needed, change its position.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NCACTIVATE">
             <summary>
            Non Client Area Activated Caption(Title) of the Form
            </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NCCALCSIZE">
             <summary>
            The WM_NCCALCSIZE message is sent when the size and position of a window's client area must be calculated. By processing this message, an application can control the content of the window's client area when the size or position of the window changes.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NCCREATE">
             <summary>
            The WM_NCCREATE message is sent prior to the WM_CREATE message when a window is first created.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NCDESTROY">
             <summary>
            The WM_NCDESTROY message informs a window that its nonclient area is being destroyed. The DestroyWindowfunction sends the WM_NCDESTROY message to the window following the WM_DESTROY message. WM_DESTROY is used to free the allocated memory object associated with the window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NCHITTEST">
             <summary>
            The WM_NCHITTEST message is sent to a window when the cursor moves, or when a mouse button is pressed or released. If the mouse is not captured, the message is sent to the window beneath the cursor. Otherwise, the message is sent to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NCLBUTTONDBLCLK">
             <summary>
            The WM_NCLBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NCLBUTTONDOWN">
             <summary>
            The WM_NCLBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NCLBUTTONUP">
             <summary>
            The WM_NCLBUTTONUP message is posted when the user releases the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NCMBUTTONDBLCLK">
             <summary>
            The WM_NCMBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NCMBUTTONDOWN">
             <summary>
            The WM_NCMBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NCMBUTTONUP">
             <summary>
            The WM_NCMBUTTONUP message is posted when the user releases the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NCMOUSEHOVER">
             <summary>
            The WM_NCMOUSEHOVER message is posted to a window when the cursor hovers over the nonclient area of the window for the period of time specified in a prior call to TrackMouseEvent.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NCMOUSELEAVE">
             <summary>
            The WM_NCMOUSELEAVE message is posted to a window when the cursor leaves the nonclient area of the window specified in a prior call to TrackMouseEvent.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NCMOUSEMOVE">
             <summary>
            The WM_NCMOUSEMOVE message is posted to a window when the cursor is moved within the nonclient area of the window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NCPAINT">
             <summary>
            The WM_NCPAINT message is sent to a window when its frame must be painted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NCRBUTTONDBLCLK">
             <summary>
            The WM_NCRBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NCRBUTTONDOWN">
             <summary>
            The WM_NCRBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NCRBUTTONUP">
             <summary>
            The WM_NCRBUTTONUP message is posted when the user releases the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NCXBUTTONDBLCLK">
             <summary>
            The WM_NCXBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NCXBUTTONDOWN">
             <summary>
            The WM_NCXBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NCXBUTTONUP">
             <summary>
            The WM_NCXBUTTONUP message is posted when the user releases the first or second X button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NCUAHDRAWCAPTION">
             <summary>
            The WM_NCUAHDRAWCAPTION message is an undocumented message related to themes. When handling WM_NCPAINT, this message should also be handled.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NCUAHDRAWFRAME">
             <summary>
            The WM_NCUAHDRAWFRAME message is an undocumented message related to themes. When handling WM_NCPAINT, this message should also be handled.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NEXTDLGCTL">
             <summary>
            The WM_NEXTDLGCTL message is sent to a dialog box procedure to set the keyboard focus to a different control in the dialog box
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NEXTMENU">
             <summary>
            The WM_NEXTMENU message is sent to an application when the right or left arrow key is used to switch between the menu bar and the system menu.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NOTIFY">
             <summary>
            Sent by a common control to its parent window when an event has occurred or the control requires some information.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NOTIFYFORMAT">
             <summary>
            Determines if a window accepts ANSI or Unicode structures in the WM_NOTIFY notification message. WM_NOTIFYFORMAT messages are sent from a common control to its parent window and from the parent window to the common control.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.NULL">
             <summary>
            The WM_NULL message performs no operation. An application sends the WM_NULL message if it wants to post a message that the recipient window will ignore.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.PAINT">
             <summary>
            Occurs when the control needs repainting
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.PAINTCLIPBOARD">
             <summary>
            The WM_PAINTCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area needs repainting.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.PAINTICON">
             <summary>
            Windows NT 3.51 and earlier: The WM_PAINTICON message is sent to a minimized window when the icon is to be painted. This message is not sent by newer versions of Microsoft Windows, except in unusual circumstances explained in the Remarks.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.PALETTECHANGED">
             <summary>
            This message is sent by the OS to all top-level and overlapped windows after the window with the keyboard focus realizes its logical palette. This message enables windows that do not have the keyboard focus to realize their logical palettes and update their client areas.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.PALETTEISCHANGING">
             <summary>
            The WM_PALETTEISCHANGING message informs applications that an application is going to realize its logical palette.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.PARENTNOTIFY">
             <summary>
            The WM_PARENTNOTIFY message is sent to the parent of a child window when the child window is created or destroyed, or when the user clicks a mouse button while the cursor is over the child window. When the child window is being created, the system sends WM_PARENTNOTIFY just before the CreateWindow or CreateWindowExfunction that creates the window returns. When the child window is being destroyed, the system sends the message before any processing to destroy the window takes place.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.PASTE">
             <summary>
            An application sends a WM_PASTE message to an edit control or combo box to copy the current content of the clipboard to the edit control at the current caret position. Data is inserted only if the clipboard contains data in CF_TEXT format.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.PENWINFIRST">
             <summary>
            Definition Needed/// 
            </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.PENWINLAST">
             <summary>
            Definition Needed
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.POWER">
             <summary>
            Notifies applications that the system, typically a battery-powered personal computer, is about to enter a suspended mode. Obsolete : use POWERBROADCAST instead///
            </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.POWERBROADCAST">
             <summary>
            Notifies applications that a power-management event has occurred.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.PRINT">
             <summary>
            The WM_PRINT message is sent to a window to request that it draw itself in the specified device context, most commonly in a printer device context.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.PRINTCLIENT">
             <summary>
            The WM_PRINTCLIENT message is sent to a window to request that it draw its client area in the specified device context, most commonly in a printer device context.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.QUERYDRAGICON">
             <summary>
            The WM_QUERYDRAGICON message is sent to a minimized (iconic) window. The window is about to be dragged by the user but does not have an icon defined for its class. An application can return a handle to an icon or cursor. The system displays this cursor or icon while the user drags the icon.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.QUERYENDSESSION">
             <summary>
            The WM_QUERYENDSESSION message is sent when the user chooses to end the session or when an application calls one of the system shutdown functions. If any application returns zero, the session is not ended. The system stops sending WM_QUERYENDSESSION messages as soon as one application returns zero. After processing this message, the system sends the WM_ENDSESSION message with the wParam parameter set to the results of the WM_QUERYENDSESSION message.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.QUERYNEWPALETTE">
             <summary>
            This message informs a window that it is about to receive the keyboard focus, giving the window the opportunity to realize its logical palette when it receives the focus.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.QUERYOPEN">
             <summary>
            The WM_QUERYOPEN message is sent to an icon when the user requests that the window be restored to its previous size and position.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.QUEUESYNC">
             <summary>
            The WM_QUEUESYNC message is sent by a computer-based training (CBT) application to separate user-input messages from other messages sent through the WH_JOURNALPLAYBACK Hook procedure.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.QUIT">
             <summary>
            Once received, it ends the application's Message Loop, signaling the application to end. It can be sent by pressing Alt+F4, Clicking the X in the upper right-hand of the program, or going to File->Exit.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.RBUTTONDBLCLK">
             <summary>
            he WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.RBUTTONDOWN">
             <summary>
            The WM_RBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.RBUTTONUP">
             <summary>
            The WM_RBUTTONUP message is posted when the user releases the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.RENDERALLFORMATS">
             <summary>
            The WM_RENDERALLFORMATS message is sent to the clipboard owner before it is destroyed, if the clipboard owner has delayed rendering one or more clipboard formats. For the content of the clipboard to remain available to other applications, the clipboard owner must render data in all the formats it is capable of generating, and place the data on the clipboard by calling the SetClipboardData function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.RENDERFORMAT">
             <summary>
            The WM_RENDERFORMAT message is sent to the clipboard owner if it has delayed rendering a specific clipboard format and if an application has requested data in that format. The clipboard owner must render data in the specified format and place it on the clipboard by calling the SetClipboardData function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.SETCURSOR">
             <summary>
            The WM_SETCURSOR message is sent to a window if the mouse causes the cursor to move within a window and mouse input is not captured.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.SETFOCUS">
             <summary>
            When the controll got the focus
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.SETFONT">
             <summary>
            An application sends a WM_SETFONT message to specify the font that a control is to use when drawing text.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.SETHOTKEY">
             <summary>
            An application sends a WM_SETHOTKEY message to a window to associate a hot key with the window. When the user presses the hot key, the system activates the window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.SETICON">
             <summary>
            An application sends the WM_SETICON message to associate a new large or small icon with a window. The system displays the large icon in the ALT+TAB dialog box, and the small icon in the window caption.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.SETREDRAW">
             <summary>
            An application sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn or to prevent changes in that window from being redrawn.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.SETTEXT">
             <summary>
            Text / Caption changed on the control. An application sends a WM_SETTEXT message to set the text of a window.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.SETTINGCHANGE">
             <summary>
            An application sends the WM_SETTINGCHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.SHOWWINDOW">
             <summary>
            The WM_SHOWWINDOW message is sent to a window when the window is about to be hidden or shown
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.SIZE">
             <summary>
            The WM_SIZE message is sent to a window after its size has changed.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.SIZECLIPBOARD">
             <summary>
            The WM_SIZECLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area has changed size.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.SIZING">
             <summary>
            The WM_SIZING message is sent to a window that the user is resizing. By processing this message, an application can monitor the size and position of the drag rectangle and, if needed, change its size or position.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.SPOOLERSTATUS">
             <summary>
            The WM_SPOOLERSTATUS message is sent from Print Manager whenever a job is added to or removed from the Print Manager queue.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.STYLECHANGED">
             <summary>
            The WM_STYLECHANGED message is sent to a window after the SetWindowLong function has changed one or more of the window's styles.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.STYLECHANGING">
             <summary>
            The WM_STYLECHANGING message is sent to a window when the SetWindowLong function is about to change one or more of the window's styles.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.SYNCPAINT">
             <summary>
            The WM_SYNCPAINT message is used to synchronize painting while avoiding linking independent GUI threads.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.SYSCHAR">
             <summary>
            The WM_SYSCHAR message is posted to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. It specifies the character code of a system character key — that is, a character key that is pressed while the ALT key is down.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.SYSCOLORCHANGE">
             <summary>
            This message is sent to all top-level windows when a change is made to a system color setting.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.SYSCOMMAND">
             <summary>
            A window receives this message when the user chooses a command from the Window menu (formerly known as the system or control menu) or when the user chooses the maximize button, minimize button, restore button, or close button.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.SYSDEADCHAR">
             <summary>
            The WM_SYSDEADCHAR message is sent to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. WM_SYSDEADCHAR specifies the character code of a system dead key — that is, a dead key that is pressed while holding down the ALT key.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.SYSKEYDOWN">
             <summary>
            The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user presses the F10 key (which activates the menu bar) or holds down the ALT key and then presses another key. It also occurs when no window currently has the keyboard focus;
             in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.SYSKEYUP">
             <summary>
            The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user releases a key that was pressed while the ALT key was held down. It also occurs when no window currently has the keyboard focus;
             in this case, the WM_SYSKEYUP message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.TCARD">
             <summary>
            Sent to an application that has initiated a training card with Microsoft Windows Help. The message informs the application when the user clicks an authorable button. An application initiates a training card by specifying the HELP_TCARD command in a call to the WinHelp function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.TIMECHANGE">
             <summary>
            A message that is sent whenever there is a change in the system time.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.TIMER">
             <summary>
            The WM_TIMER message is posted to the installing thread's message queue when a timer expires. The message is posted by the GetMessage or PeekMessage function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.UNDO">
             <summary>
            An application sends a WM_UNDO message to an edit control to undo the last operation. When this message is sent to an edit control, the previously deleted text is restored or the previously added text is deleted.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.UNINITMENUPOPUP">
             <summary>
            The WM_UNINITMENUPOPUP message is sent when a drop-down menu or submenu has been destroyed.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.USER">
             <summary>
            The WM_USER constant is used by applications to help define private messages for use by private window classes, usually of the form WM_USER+X, where X is an integer value.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.USERCHANGED">
             <summary>
            The WM_USERCHANGED message is sent to all windows after the user has logged on or off. When the user logs on or off, the system updates the user-specific settings. The system sends this message immediately after updating the settings.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.VKEYTOITEM">
             <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_KEYDOWN message.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.VSCROLL">
             <summary>
            The WM_VSCROLL message is sent to a window when a scroll event occurs in the window's standard vertical scroll bar. This message is also sent to the owner of a vertical scroll bar control when a scroll event occurs in the control.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.VSCROLLCLIPBOARD">
             <summary>
            The WM_VSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's vertical scroll bar. The owner should scroll the clipboard image and update the scroll bar values.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.WINDOWPOSCHANGED">
             <summary>
            The WM_WINDOWPOSCHANGED message is sent to a window whose size, position, or place in the Z order has changed as a result of a call to the SetWindowPos function or another window-management function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.WINDOWPOSCHANGING">
             <summary>
            The WM_WINDOWPOSCHANGING message is sent to a window whose size, position, or place in the Z order is about to change as a result of a call to the SetWindowPos function or another window-management function.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.WININICHANGE">
             <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI. Note The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.XBUTTONDBLCLK">
             <summary>
            The WM_XBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.XBUTTONDOWN">
             <summary>
            The WM_XBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="F:YLib.Expansion.WM_Const.XBUTTONUP">
             <summary>
            The WM_XBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
             </summary>
        </member>
        <member name="M:YLib.Designers.ControlBaseDesigner.GetNewName(System.String)">
            <summary>
            Gets a new tab name for the a tab.
            </summary>
        </member>
        <member name="M:YLib.Designers.ControlBaseDesigner.Check_UniqueName(System.Windows.Forms.Control,System.String)">
            <summary>
            Check UniqueName
            </summary>
        </member>
        <member name="M:YLib.Designers.RectangleBaseDesigner.Find_SetControl(System.Windows.Forms.Control)">
            <summary>
            Find all controls with "Test design"
            </summary>
        </member>
        <member name="M:YLib.Designers.InteractiveBaseDesigner.GetNewName">
            <summary>
            Gets a new tab name for the a tab.
            </summary>
        </member>
        <member name="M:YLib.Designers.InteractiveBaseDesigner.Check_UniqueName(System.Windows.Forms.Control,System.String)">
            <summary>
            Check UniqueName
            </summary>
        </member>
        <member name="M:YLib.Designers.TabControlNewDesigner.GetNewPageName">
            <summary>
            Gets a new tab name for the a tab.
            </summary>
        </member>
        <member name="M:YLib.Designers.TabControlNewDesigner.Check_UniqueName(System.Windows.Forms.Control,System.String)">
            <summary>
            Check UniqueName
            </summary>
        </member>
        <member name="M:YLib.Designers.TabPageNewDesigner.GetNewPageName">
            <summary>
            Gets a new tab name for the a tab.
            </summary>
        </member>
        <member name="M:YLib.Designers.TabPageNewDesigner.Check_UniqueName(System.Windows.Forms.Control,System.String)">
            <summary>
            Check UniqueName
            </summary>
        </member>
        <member name="M:YLib.Extensions.Extensions.Replace_x86(System.Windows.Forms.Control)">
            <summary>
             Change path x86 in Control.Text (if new path exist)
            </summary>
            <returns>Return true if text replacement</returns>
        </member>
        <member name="M:YLib.Extensions.Extensions.ReplaceDecimal(System.String)">
            <summary>
            Check decimal separators and replace, if separator error
            </summary>
            <returns></returns>
        </member>
        <member name="M:YLib.Extensions.Extensions.EqualRGB(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Compare color on RGB format
            </summary>
        </member>
        <member name="M:YLib.Extensions.Extensions.GetName(System.Drawing.Color)">
            <summary>
            Get Name Color from RGB format
            </summary>
            <param name="rgbColor">Color in RGB format</param>
            <returns>Return Color with Name, if color exist, else return RGB format</returns>
        </member>
        <member name="M:YLib.Extensions.Extensions.GetRotate90(YLib.Expansion.GradientTypes)">
            <summary>
            Rotate worked only for DarkLightDark and LightDarkLight
            </summary>
        </member>
        <member name="M:YLib.Extensions.Extensions.RadiusInside(System.Drawing.Rectangle)">
            <summary>
            Radius inside rectangle
            </summary>
        </member>
        <member name="M:YLib.Extensions.Extensions.AddByCount``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
             Add list elements by count, return exception if count lower list.Count
            </summary>
        </member>
        <member name="M:YLib.Extensions.Extensions.Clone``1(``0)">
            <summary>
            Жутко медленный метод!
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controlToClone"></param>
            <returns></returns>
        </member>
        <member name="M:YLib.Extensions.Extensions.GetInvert(System.Drawing.Color)">
            <summary>
            Inverse color (White or Black)
            </summary>
            <param name="color">The color that inverse</param>
            <returns>Return inversion color</returns>
        </member>
        <member name="M:YLib.Extensions.Extensions.LastIndex(System.String)">
            <summary>
            Get last index (return -1 if is empty)
            </summary>
            <param name="str">Processed object</param>
            <returns>Return last index</returns>
        </member>
        <member name="M:YLib.Extensions.Extensions.LastIndex(System.Collections.ICollection)">
            <summary>
            Get last index (return -1 if is empty)
            </summary>
            <param name="list">Processed object</param>
            <returns>Return last index</returns>
        </member>
        <member name="M:YLib.Extensions.Extensions.ChangeSize(System.Drawing.Font,System.Single)">
            <summary>
            Change size current font
            </summary>
            <param name="font">Current font</param>
            <param name="newSize">New size which to set</param>
        </member>
        <member name="M:YLib.Extensions.Extensions.GetWithNewSize(System.Drawing.Font,System.Single)">
            <summary>
            Get new font with cnanged size
            </summary>
            <param name="font">Processed font</param>
            <param name="newSize">New size which to set</param>
            <returns>Return font with new size</returns>
        </member>
        <member name="M:YLib.Extensions.Extensions.ToStringNull(System.Object,System.Boolean)">
            <summary>
            Get string from object (return "" if object == null or return "null" if returnNullText == true)"
            </summary>
            <param name="obj">Processed object</param>
            <param name="returnNullText">Set true if return return "null" when object==null</param>
            <returns>Return string from object</returns>
        </member>
        <member name="M:YLib.Extensions.Extensions.IsString_Null(System.Object)">
            <summary>
            Return true if object type is string and empty
            </summary>
            <param name="obj">Processed object</param>
            <returns>Return true if object is string and string.IsNullOrEmpty((string)object)</returns>
        </member>
        <member name="M:YLib.Extensions.Extensions.IsNull(System.String)">
            <summary>
            Return true if object type is string and empty
            </summary>
            <param name="text">Processed object</param>
            <returns>Return true if object.IsString() and string.IsNullOrEmpty((string)object)</returns>
        </member>
        <member name="M:YLib.Extensions.Extensions.IsInteger(System.Object)">
            <summary>
            Define object type is integer
            </summary>
            <param name="obj">Processed object</param>
            <returns>Return true if object is Int32 or lower</returns>
        </member>
        <member name="M:YLib.UserAppConfig.SaveUnit(System.String,System.String,System.Object)">
            <summary>
            Get unit by nameObject and nameParameter
            </summary>
        </member>
        <member name="M:YLib.UserAppConfig.GetUnit(System.String,System.String)">
            <summary>
            Get unit by nameObject and nameParameter
            </summary>
        </member>
        <member name="M:YLib.UserAppConfig.GetUnits(System.String)">
            <summary>
            Get all units for defined object 
            </summary>
        </member>
        <member name="M:YLib.Functions.SortingNatural(System.Data.DataTable,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Натуральная сортировка (сортировка с учетом чисел)
            </summary>
            <param name="dtSource">Обрабатываемая таблица.</param>
            <param name="ColumnSort">Имя столбца, по которому сортировать</param>
            <param name="ColumnNumber">Имя столбца, в который вывести порядковые номера (начиная с 1)</param>
            <param name="NumericFirst">true, если числа считаем первее букв</param>
             <param name="NullStart">true, если выдать отсчет с нуля</param>
             <param name="CaseSensitive">true, если учитывать регистр букв</param>
            <returns>возвращает true, если сортировка прошла без ошибок</returns>
        </member>
        <member name="M:YLib.Functions.SortingNatural(System.Data.DataTable,System.Int16,System.Int16,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Натуральная сортировка (сортировка с учетом чисел)
            </summary>
            <param name="dtSource">Обрабатываемая таблица.</param>
            <param name="NumColumnSort">Номер столбца, по которому сортировать</param>
            <param name="NumColumnNumber">Номер столбца, в который вывести порядковые номера (начиная с 1)</param>
            <param name="NumericFirst">true, если числа считаем первее букв</param>
             <param name="NullStart">true, если выдать отсчет с нуля</param>
             <param name="CaseSensitive">true, если учитывать регистр букв</param>
            <returns>возвращает true, если сортировка прошла без ошибок</returns>
        </member>
        <member name="M:YLib.Functions.NotOverlapNumbers(System.Int32[],System.Boolean)">
            <summary>
            Поиск одинаковых номеров
            </summary>
            <param name="Numbers"></param>
            <returns>Возвращает true, если нет совпадений</returns>
        </member>
        <member name="M:YLib.Functions.NumericSeparator(System.Object,System.Char)">
            <summary>
            Добавления разделителя тысяч с выводом в string
            </summary>
            <param name="objTxt">Обрабатываемый объект (число)</param>
            <param name="separator">Разделитель (по умолчанию - ' ')</param>
            <returns>Возвращает строковое значение с разделителем</returns>
        </member>
        <member name="M:YLib.Functions.NumericSeparator(System.String,System.Char)">
            <summary>
            Добавления разделителя тысяч с выводом в string
            </summary>
            <param name="text">Обрабатываемый объект (число)</param>
            <param name="separator">Разделитель (по умолчанию - ' ')</param>
            <returns>Возвращает строковое значение с разделителем</returns>
        </member>
        <member name="F:YLib.ImageAnimatorNew.imageInfoList">
            <devdoc>
                A list of images to be animated.    
            </devdoc>
        </member>
        <member name="F:YLib.ImageAnimatorNew.anyFrameDirty">
            <devdoc>
                A variable to flag when an image or images need to be updated due to the selection of a new frame
                in an image.  We don't need to synchronize access to this variable, in the case it is true we don't
                do anything, otherwise the worse case is where a thread attempts to update the image's frame after
                another one did which is harmless.
            </devdoc>
        </member>
        <member name="F:YLib.ImageAnimatorNew.animationThread">
            <devdoc>
                The thread used for animating the images.
            </devdoc>
        </member>
        <member name="F:YLib.ImageAnimatorNew.rwImgListLock">
            <devdoc>
                Lock that allows either concurrent read-access to the images list for multiple threads, or write- 
                access to it for a single thread.  Observe that synchronization access to image objects are done
                with critical sections (lock).
            </devdoc>
        </member>
        <member name="M:YLib.ImageAnimatorNew.#ctor">
            <devdoc>
                Prevent instantiation of this class.
            </devdoc>
        </member>
        <member name="M:YLib.ImageAnimatorNew.UpdateFrames(System.Drawing.Image)">
            <devdoc>
                Advances the frame in the specified image. The new frame is drawn the next time the image is rendered.
            </devdoc>
        </member>
        <member name="M:YLib.ImageAnimatorNew.UpdateFrames">
            <devdoc>
                Advances the frame in all images currently being animated. The new frame is drawn the next time the image is rendered.
            </devdoc>
        </member>
        <member name="M:YLib.ImageAnimatorNew.Animate(System.Drawing.Image,System.EventHandler)">
            <devdoc>
                Adds an image to the image manager.  If the image does not support animation this method does nothing.
                This method creates the image list and spawns the animation thread the first time it is called.
            </devdoc>
        </member>
        <member name="M:YLib.ImageAnimatorNew.CanAnimate(System.Drawing.Image)">
            <devdoc>
               Whether or not the image has multiple time-based frames.
            </devdoc>
        </member>
        <member name="M:YLib.ImageAnimatorNew.StopAnimate(System.Drawing.Image,System.EventHandler)">
            <devdoc>
                Removes an image from the image manager so it is no longer animated.
            </devdoc>
        </member>
        <member name="M:YLib.ImageAnimatorNew.AnimateImages10ms">
            <devdoc>
                Worker thread procedure which implements the main animation loop.
                NOTE: This is the ONLY code the worker thread executes, keeping it in one method helps better understand 
                any synchronization issues.  
                WARNING: Also, this is the only place where ImageInfo objects (not the contained image object) are modified,
                so no access synchronization is required to modify them.
            </devdoc>
        </member>
        <member name="M:YLib.ImageAnimatorNew.ImageInfo.#ctor(System.Drawing.Image)">
            <devdoc> 
            </devdoc>  
        </member>
        <member name="P:YLib.ImageAnimatorNew.ImageInfo.Animated">
            <devdoc> 
                Whether the image supports animation.
            </devdoc>  
        </member>
        <member name="P:YLib.ImageAnimatorNew.ImageInfo.Frame">
            <devdoc> 
                The current frame.
            </devdoc> 
        </member>
        <member name="P:YLib.ImageAnimatorNew.ImageInfo.FrameDirty">
            <devdoc> 
                The current frame has not been updated.
            </devdoc> 
        </member>
        <member name="P:YLib.ImageAnimatorNew.ImageInfo.FrameChangedHandler">
            <devdoc> 
            </devdoc> 
        </member>
        <member name="P:YLib.ImageAnimatorNew.ImageInfo.FrameCount">
            <devdoc> 
                The number of frames in the image.
            </devdoc> 
        </member>
        <member name="M:YLib.ImageAnimatorNew.ImageInfo.FrameDelay(System.Int32)">
            <devdoc> 
                The delay associated with the frame at the specified index.
            </devdoc> 
        </member>
        <member name="P:YLib.ImageAnimatorNew.ImageInfo.FrameTimer">
            <devdoc> 
            </devdoc> 
        </member>
        <member name="P:YLib.ImageAnimatorNew.ImageInfo.Image">
            <devdoc> 
                The image this object wraps.
            </devdoc> 
        </member>
        <member name="M:YLib.ImageAnimatorNew.ImageInfo.UpdateFrame">
            <devdoc> 
                Selects the current frame as the active frame in the image.
            </devdoc> 
        </member>
        <member name="M:YLib.ImageAnimatorNew.ImageInfo.OnFrameChanged(System.EventArgs)">
            <devdoc> 
                Raises the FrameChanged event.
            </devdoc> 
        </member>
        <member name="M:YLib.InputBox.Show(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Show modal window (return changed values)
            </summary>
            <param name="sourceValues"></param>
            <param name="descriptions"></param>
            <param name="minValues"></param>
            <param name="maxValues"></param>
            <returns>return changed values</returns>
        </member>
        <member name="T:YLib.ResourceImages">
            <summary>
              Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
            </summary>
        </member>
        <member name="P:YLib.ResourceImages.ResourceManager">
            <summary>
              Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
            </summary>
        </member>
        <member name="P:YLib.ResourceImages.Culture">
            <summary>
              Перезаписывает свойство CurrentUICulture текущего потока для всех
              обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
            </summary>
        </member>
        <member name="P:YLib.ResourceImages.ColorBarIndicator">
            <summary>
              Поиск локализованного ресурса типа System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:YLib.ResourceImages.DownLoader_Skype">
            <summary>
              Поиск локализованного ресурса типа System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:YLib.ResourceImages.EyeDropper">
            <summary>
              Поиск локализованного ресурса типа System.Drawing.Bitmap.
            </summary>
        </member>
    </members>
</doc>
